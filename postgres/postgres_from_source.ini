# A quick guide to install PostGIS from source on Ubuntu 12.04 Linux
#SHORT VERSION(Quick Reference)
./configure
make
su
make install
adduser postgres
passwd postgres 
# (postgres 111)
mkdir /usr/local/pgsql/data
chown postgres:postgres /usr/local/pgsql/data
su postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&1 &
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test

# LONG VERSION
#Pre-Requirements: Install make readline and zlib
apt-cache search readline | grep readline 
apt-get install make
apt-get install libreadline-dev #readline---> libreadline-dev
apt-get install zlib1g-dev #zlib---> zlib1g-dev
# Install PostgreSQL
wget http://ftp.postgresql.org/pub/source/v9.2.1/postgresql-9.2.1.tar.gz
tar -xzvf postgresql-9.2.1.tar.gz
cd postgresql-9.2.1
./configure
# ./configure --prefix=PREFIX
#Install all files under the directory PREFIX instead of /usr/local/pgsql.
make 
# All of PostgreSQL is successfully made. Ready to install.
su
passwd postgres # (postgres 111)
make install
adduser postgres 
passwd postgres # (postgres 111)
# PostgreSQL can not run as root,so postgres user and group must be created.(postgres:postgres)
mkdir /usr/local/pgsql/data
chown postgres:postgres /usr/local/pgsql/data
ls -ld /usr/local/pgsql/data
su  postgres
/usr/local/pgsql/bin/initdb -D /usr/local/pgsql/data
#Success. You can now start the database server using:
#    /usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data
# or
#    /usr/local/pgsql/bin/pg_ctl -D /usr/local/pgsql/data -l logfile start
ls -l /usr/local/pgsql/data
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&1 &
cat logfile
#LOG:  database system was shut down at 2009-04-08 23:29:50 PDT
#LOG:  autovacuum launcher started
#LOG:  database system is ready to accept connections
# Possible Error 
#FATAL:  lock file "postmaster.pid" already exists
# Solution:
# rm /usr/local/postgresql/data/postmaster.pid 
# rm /tmp/.s.PGSQL.5432.lock
ps -e | grep postgres # postmaster.pid
/usr/local/pgsql/bin/createdb test
/usr/local/pgsql/bin/psql test
#Type:  \copyright for distribution terms
#       \h for help with SQL commands
#       \? for help with psql commands
#       \g or terminate with semicolon to execute query
#       \q to quit
test=# \?
test=# \q

# Set Environment Variables
su postgres 
echo "export POSTGRES_HOME=/usr/local/pgsql" >> ~/.bashrc
echo "export LD_LIBRARY_PATH=/usr/local/pgsql/lib" >> ~/.bashrc
echo "export PATH=/usr/local/pgsql/bin:$PATH" >> ~/.bashrc
source ~/.bashrc
env | grep LD_LIBRARY_PATH
env | grep PATH 
env | grep POSTGRES_HOME

# use createdb instead of /usr/local/pgsql/bin/createdb
createdb test2
psql test2
dropdb test2

# Install PostGIS
# proj geos libxml2 (gdal json-c)
su 
# install proj
wget http://download.osgeo.org/proj/proj-4.8.0.tar.gz
tar -xvzf proj-4.8.0.tar.gz
cd proj-4.8.0
./configure --prefix=/usr/local/proj
make 
make install
# install geos
wget http://download.osgeo.org/geos/geos-3.3.5.tar.bz2
tar -xvjf geos-3.3.5.tar.bz2
cd geos-3.3.5
./configure --prefix=/usr/local/geos
make 
make install
# install libxml2
apt-get install libxml2-dev
ls -l /usr/bin/xml2-config

# ???
vim /etc/ld.so.conf
# added for  /etc/ld.so.cache
/usr/local/geos/lib
/sbin/ldconfig

# install gdal
wget http://download.osgeo.org/gdal/gdal-1.9.1.tar.gz
tar -xvzf gdal-1.9.1.tar.gz
cd gdal-1.9.1
./configure --prefix=/usr/local/gdal
make 
make install
# install json-c
wget https://github.com/downloads/json-c/json-c/json-c-0.10.tar.gz
tar -xvzf json-c-0.10.tar.gz
cd json-c-0.10
./configure --prefix=/usr/local/json
make 
make install
# install postgis 
wget http://postgis.refractions.net/download/postgis-2.0.1.tar.gz
tar -xvzf postgis-2.0.1.tar.gz
cd postgis-2.0.1
# ./configure --with-pgconfig=/usr/local/pgsql/bin/pg_config --with-projdir=/usr/local/proj --with-geosconfig=/usr/local/geos/bin/geos-config --with-xml2config=/usr/bin/xml2-config --with-gdalconfig=/usr/local/gdal/bin/gdal-config --with-jsondir=/usr/local/json --with-gui --with-topology
# /usr/local/json/include/json/json.h  fatal error: json_object_iterator.h
./configure --with-pgconfig=/usr/local/pgsql/bin/pg_config --with-projdir=/usr/local/proj --with-geosconfig=/usr/local/geos/bin/geos-config --with-xml2config=/usr/bin/xml2-config --with-gdalconfig=/usr/local/gdal/bin/gdal-config --with-gui --with-topology

make 
make install

# Error:could not load library "/usr/local/pgsql/lib/postgis-1.5.so": libproj.so.0: 
# Solution:
export LD_LIBRARY_PATH=/usr/local/geos/lib:$LD_LIBRARY_PATH
export LD_LIBRARY_PATH=/usr/local/proj/lib:$LD_LIBRARY_PATH
vim /home/postgres/.bashrc
LD_LIBRARY_PATH=/usr/local/pgsql/lib:/usr/local/geos/lib:/usr/local/proj/lib
cd /usr/local/pgsql/lib/ 
su
ln -s /usr/local/proj/lib/libproj.so.0 libproj.so.0
ls -l libproj.so.0

# Create Spatial Database 
su postgres
createdb template_postgis
ls -l /usr/local/pgsql/share/contrib/postgis-2.0/postgis.sql
psql -f /usr/local/pgsql/share/contrib/postgis-2.0/postgis.sql -d template_postgis
# Error:could not load library "/usr/local/pgsql/lib/postgis-1.5.so": libproj.so.0: 
createdb -U postgres -T template_postgis my_spatial_db 
# createdb [-U username] -T template_postgis my_spatial_db 
#  default username is postgres
psql my_spatial_db
my_spatial_db=# select postgis_full_version(); 

# Remote access
vim /usr/local/pgsql/data/postgresql.conf 
listen_address='*'
vim /usr/local/pgsql/data/pg_hba.conf 
host all all 192.168.1.0/24 password

#GUI Tool
apt-get install pgadmin3
# New Server 
# (Name:XXX Host:localhost Port:5432 Username:postgres Password:111)
apt-get install phppgadmin
# http://localhost/phppgadmin

# OTHER 
make
#If you want to build everything that can be built, including the documentation (HTML and man pages), and the additional modules (contrib), type instead:
make world
#The last line displayed should be: PostgreSQL, contrib and HTML documentation successfully made. Ready to install.

make install  #  PostgreSQL 
make install-docs # contrib and documentation
#OR 
make install-world # PostgreSQL ,contrib and documentation

#Uninstall
make uninstall

# Cleaning
make clean  # remove built files from source tree,but preserve the files made by the configure program  (make)
gmake distclean # reset the source tree (./configure)

#You should put these commands into a shell start-up file such as /etc/profile or ~/.bashrc. 
LD_LIBRARY_PATH=/usr/local/pgsql/lib
export LD_LIBRARY_PATH
PATH=/usr/local/pgsql/bin:$PATH
export PATH

# Architectural Fundamental
# A server process ---postgres
# The user's client


# QUICK USAGE GUIDE CONCLUSION
su postgres # MUST
cd
ps -e | grep postgres
env | grep LD_LIBRARY_PATH
env | grep PATH 
env | grep POSTGRES_HOME
/usr/local/pgsql/bin/postgres -D /usr/local/pgsql/data >logfile 2>&1 &
postgres -D /usr/local/pgsql/data >logfile 2>&1 &
createdb template_postgis
cd /usr/local/pgsql/share/contrib/postgis-2.0/
ls # xxx.sql
psql -d template_postgis -f postgis.sql 
psql -d template_postgis -f postgis_comments.sql 
psql -d template_postgis -f topology.sql 
psql -d template_postgis -f topology_comments.sql 
psql -d template_postgis -f spatial_ref_sys.sql 
psql -d template_postgis -f rtpostgis.sql 
psql -d template_postgis -f raster_comments.sql 

createdb -U postgres -T template_postgis my_spatial_db 
psql my_spatial_db
my_spatial_db=# select version(); 
my_spatial_db=# select postgis_full_version(); 


# PostGIS Functions
# There are three different base-defined geometry types: POINT (point), LINESTRING (line) and Polygon (area).  Of these four basic types of geometry types are derived: MULTIPOINT, MULTILINESTRING, MULTIPOLYGON and GEOMETRYCOLLECTION. 
# Well-Known Text(WKT) and Well-Known Binary(WKB)
# The column for the geometry data must be generated with the PostGIS function (OpenGIS) AddGeometryColumn (), where each statement, select only one geometry column can be created.  So there are two steps necessary to create a table with a geometry column:
# CREATE TABLE xxx
# SELECT AddGeometryColumn ()
# AddGeometryColumn (schema name, table name, column name, SRID, geometry, dimension) 
# or if the table in the default schema (public) should be created:  
#  AddGeometryColumn (table name, column name, SRID, geometry, dimension) 
# Scheme Name VARCHAR  The scheme, under which the table should be created 
# Table Name     VARCHAR  Name of the table 
# Column Name VARCHAR  Name of the geometry column 
# SRID  INTEGER Spatial Reference System Identifier, for example, 31,467 Gauss-Krüger or -1 if not set. 
# Geometry         VARCHAR  eg 'POINT', 'LINE STRING', 'POLYGON' 
# Dimension       INTEGER     Dimension of the points (2 or 3) 
# 
psql my_spatial_db
# POINT
CREATE TABLE point (ps INTEGER, name VARCHAR);
SELECT AddGeometryColumn('point','geom',-1,'POINT',2);
SELECT AddGeometryColumn('public','point','geom',-1,'POINT',2);
# LINESTRING
CREATE TABLE line (ps INTEGER, name VARCHAR);
SELECT AddGeometryColumn('line','geom',-1,'LINESTRING',2);
# POLYGON
CREATE TABLE polygon (ps INTEGER, name VARCHAR);
SELECT AddGeometryColumn('polygon','geom',-1,'POLYGON',2);

#  GeometryFromText (text, SRID) 
# text  VARCHAR  Geometry in WKT format, eg 'POINT (10 20)' 
# SRID  INTEGER Spatial Reference System Identifier, for example, 31,467 Gauss-Krüger or -1 if not set. 
INSERT INTO point(ps,name,geom) VALUES(1234,'red',ST_GeometryFromText('POINT (100 200)',-1));

SELECT ps,name, geom FROM point; # geom WKB
SELECT ps,name, ST_AsText(geom) FROM point; # st_astext  WKT
SELECT ps,name, ST_AsText(geom) as geomText FROM point; # geomtext WKT

# Procedural Language : PL/pgSQL
# List databases and tables
# \l \c db \d \d table  
psql postgres
postgres=# select version(); 
postgres=#\l  # list all databases
postgres=#\c testdb # psql testdb
testdb=#\c postgis
postgis=#\d  # list all tables in db
postgis=#\d spatial_ref_sys  # describe table
postgis=#SELECT * from spatial_ref_sys;


# Load shapefile data into PostGIS by shp2pgsql

