#http://www.thegeekstuff.com/2013/01/mount-umount-examples/

#Once you insert new hard disks into your system, you’ll typically use utilities like fdisk or parted to create partitions. Once you create a partition, you’ll use mkfs command to create ext2, ext3, or ext4 partition.

#Once you create a partition, you should use mount command to mount the partition into a mount point (a directory), to start using the filesystem.

#The general mount command syntax to mount a device:
#mount -t type device destination_dir


#==========================================================
#1. Mount a CD-ROM
#==========================================================

#The device file for CD would exist under /dev directory. For example, a CD-ROM device will be mounted as shown below.

mount -t iso9660 -o ro /dev/cdrom /mnt

#In the above example, the option “-o ro” indicates that the cdrom should be mounted with read-only access. Also, make sure that the destination directory (in the above example, /mnt) exist before you execute the mount command.


#==========================================================
#2. View All Mounts
#==========================================================

#After you execute mount a partition or filesystem, execute the mount command without any arguments to view all the mounts.

mount
#/dev/sda2 on / type ext4 (rw,errors=remount-ro)
#proc on /proc type proc (rw,noexec,nosuid,nodev)
#sysfs on /sys type sysfs (rw,noexec,nosuid,nodev)
#none on /sys/fs/fuse/connections type fusectl (rw)
#none on /sys/kernel/debug type debugfs (rw)
#none on /sys/kernel/security type securityfs (rw)
#udev on /dev type devtmpfs (rw,mode=0755)
#devpts on /dev/pts type devpts (rw,noexec,nosuid,gid=5,mode=0620)
#tmpfs on /run type tmpfs (rw,noexec,nosuid,size=10%,mode=0755)
#none on /run/lock type tmpfs (rw,noexec,nosuid,nodev,size=5242880)
#none on /run/shm type tmpfs (rw,nosuid,nodev)
#/dev/sda1 on /boot/efi type vfat (rw)

#You can also use df command to view all the mount points.
df -h
#Filesystem      Size  Used Avail Use% Mounted on
#/dev/sda2       533G  9.0G  497G   2% /
#udev             12G  4.0K   12G   1% /dev
#tmpfs           4.8G  264K  4.8G   1% /run
#none            5.0M     0  5.0M   0% /run/lock
#none             12G     0   12G   0% /run/shm
#/dev/sda1        94M  124K   94M   1% /boot/efi

cat /etc/mtab 
cat /proc/mounts

#==========================================================
# 3. Mount all the filesystem mentioned in /etc/fstab
#==========================================================

#The filesystems listed in /etc/fstab gets mounted during booting process. After booting, system administrator may unmount some of the partitions for various reasons. If you want all the filesystems to be mounted as specified in /etc/fstab, use -a option with mount as shown below:

#Example /etc/fstab file entries:
cat /etc/fstab
#********************************************************
#********************************************************
# <file system> <mount point>   <type>  <options>       <dump>  <pass>
proc            /proc           proc    nodev,noexec,nosuid 0       0
# / was on /dev/sda2 during installation
UUID=38565f71-11e7-4ab8-af50-a2c05eddf9d9 /               ext4    errors=remount-ro 0       1
# /boot/efi was on /dev/sda1 during installation
UUID=FEC8-9EA7  /boot/efi       vfat    defaults        0       1
# swap was on /dev/sda3 during installation
UUID=59b1e426-2425-4e2e-92f9-4c8939a56765 none            swap    sw              0       0
#********************************************************
#********************************************************

#Execute mount command with -a option to mount all the /etc/fstab entries.
mount -a

#The same -a option can be used with umount to unmount all the filesystems mentioned in /etc/mtab
umount -a
#Some filesystem are not unmounted as its busy or currently in use. Note that the files /etc/mtab and /proc/mounts contents would be similar.

#==========================================================
#4. Mount only a specific filesystem from /etc/fstab
#==========================================================
#When you pass only the directory name to mount, it looks for mount point entries, if not found, then search continuous for a device in /etc/fstab and gets mounted.

mount /dev/sda6

#==========================================================
#5. View all mounted partitions of specific type
#==========================================================

#It is possible to list only the specific type of filesystem mounted using the option -l with -t as shown below:
mount -l -t ext4
#/dev/sda2 on / type ext4 (rw,errors=remount-ro)

#==========================================================
#6. Mount a Floppy Disk
#==========================================================

#The device file for floppy disk would exist under /dev directory. For example, a floppy disk will be mounted as shown below.

mount /dev/fd0 /mnt
cd /mnt
#After the successful mount, you would be able to access the contents of the floppy disk. Once you are done with it, use umount before you physically remove the floppy disk from the system.

umount /mnt

#==========================================================
#7. Bind mount points to a new directory
#==========================================================

#The mountpoint can be binded to a new directory. So that you would be able to access the contents of a filesystem via more than one mountpoints at the same time.

#Use -B option with olddir and newdir to be binded as follows,

mount -B /mydata /mnt
#Now the bind is done and you might verify it as follows,

mount | grep /mydata
#/dev/sda6 on /mydata type ext2 (rw)
#/mydata on /mnt type none (rw,bind)

#As seen above the bind is done properly. So when you do modification in filesystem in one place, you can see those reflection of it in other mount point as shown below:

cd /mydata
ls
#test
mkdir dir1
mkdir dir2
ls
#test    dir1    dir2

cd /mnt
ls
#test    dir1    dir2

#==========================================================
#8. Access contents from new mount point
#==========================================================

#Mount allows you to access the contents of a mount point from a new mount point. Its nothing but move a mounted tree to another place.

#In the example below, the mount point /mydata will be accessed from /mnt using the option -M as shown below:

mount -M /mydata /mnt/
#Once its done, you cant use the old mount point as its moved to a new mount point and this can be verified as shown below:

mount | grep /mydata
mount | grep /mnt
#/dev/sda6 on /mnt type ext2 (rw)


#==========================================================
#12. Mount an iso image into a directory
#==========================================================
mount -t iso9660 -o loop pdf_collections.iso /mnt
cd /mnt
ls
#perl/    php/    mysql/

#==========================================================
#13. Unmount more than one mount points
#==========================================================

#Umount allows you to unmount more than mount point in a single execution of umount of command as follows:

umount /mydata  /backup
mount | grep /mydata
mount | grep /backup

#==========================================================
#14. Lazy unmount of a filesystem
#==========================================================

#This is a special option in umount, in case you want to unmount a partition after disk operations are done. You can issue command umount -l with that partition and the unmount will be done after the disk operations gets finished.

#For instance, consider a scenario that a task (i.e: script or any other command) is doing a copy operation on a disk and at the same time you are allowed to issue a unmount with -l, so that unmount would be done once the copy is over (i.e: the disk operation).

umount /mydata -l

#==========================================================
#15. Forcefully unmount a filesystem
#==========================================================

#umount provides the option to forcefully unmount a filesystem with option -f when the device is busy as shown below:

umount -f /mnt
#If this doesn’t work for you, then you can go for lazy unmount.
