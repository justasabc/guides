#============================================
# Demo1
#============================================
lscpu
#Architecture:          x86_64
#CPU op-mode(s):        32-bit, 64-bit
#Byte Order:            Little Endian
CPU(s):                16
#On-line CPU(s) list:   0-15
Thread(s) per core:    2
Core(s) per socket:    4
Socket(s):             2
#NUMA node(s):          2
#Vendor ID:             GenuineIntel
#CPU family:            6
#Model:                 44
#Stepping:              2
#CPU MHz:               1596.000
#BogoMIPS:              4800.19
Virtualization:        VT-x
#L1d cache:             32K
#L1i cache:             32K
#L2 cache:              256K
#L3 cache:              12288K
#NUMA node0 CPU(s):     0-3,8-11
#NUMA node1 CPU(s):     4-7,12-15

#-------------------------------
# logical cpus
#-------------------------------
16=2*4*2 logical cpus
grep "processor" /proc/cpuinfo
#processor	: 0
#processor	: 1
#processor	: 2
#processor	: 3
#processor	: 4
#processor	: 5
#processor	: 6
#processor	: 7
#processor	: 8
#processor	: 9
#processor	: 10
#processor	: 11
#processor	: 12
#processor	: 13
#processor	: 14
#processor	: 15

grep "processor" /proc/cpuinfo | wc -l
# 16

# dmidecode command reads the system DMI table to display hardware and BIOS information of the server. Apart from getting current configuration of the system, you can also get information about maximum supported configuration of the system using dmidecode. For example, dmidecode gives both the current RAM on the system and the maximum RAM supported by the system

# =========================================================
# 1. Overview of dmidecode
# =========================================================
#Distributed Management Task Force maintains the DMI specification and SMBIOS specification. The output of the dmidecode contains several records from the DMI (Desktop Management interface) table.

#Following is the record format of the dmidecode output of the DMI table.

#**********************************************************
#Record Header: Handle {record id}, DMI type {dmi type id}, {record size} bytes
#Record Value: {multi line record value}
#**********************************************************
#record id: Unique identifier for every record in the DMI table.
#dmi type id: Type of the record. i.e BIOS, Memory etc.,
#record size: Size of the record in the DMI table.
#multi line record values: Multi line record value for that specific DMI type.
 dmidecode | head -15
# dmidecode 2.11
# SMBIOS entry point at 0x7f6be000
#SMBIOS 2.5 present.
#90 structures occupying 3412 bytes.
#Table at 0x7F6BD000.
#
#Handle 0x0000, DMI type 38, 16 bytes
#IPMI Device Information
#	Interface Type: KCS (Keyboard Control Style)
#	Specification Version: 2.0
#	I2C Slave Address: 0x10
#	NV Storage Device: Not Present
#	Base Address: 0x0000000000000CA2 (I/O)

# Get the total number of records in the DMI table as shown below:
dmidecode | grep "^Handle" | wc -l
#90

# =========================================================
#2. DMI Types
# =========================================================
#DMI Type id will give information about a particular hardware component of your system. Following command with type id 4 will get the information about CPU of the system.

dmidecode -t 4
dmidecode -t baseboard

# =========================================================
#3. Get Physical Memory (RAM) information using dmidecode
# =========================================================
#What is the maximum RAM supported by the system? In this example, this system can support maximum 192GB of RAM.

# max RAM: 192G
dmidecode -t 16
# dmidecode 2.11
# SMBIOS entry point at 0x7f6be000
#SMBIOS 2.5 present.
#
#Handle 0x0009, DMI type 16, 15 bytes
#Physical Memory Array
#	Location: System Board Or Motherboard
#	Use: System Memory
#	Error Correction Type: Single-bit ECC
#	Maximum Capacity: 192 GB
#	Error Information Handle: Not Provided
#	Number Of Devices: 18


#How much memory can I expand to? From /proc/meminfo you can find out the total current memory of your system as shown below.

# 1G= 2*512MB
grep MemTotal /proc/meminfo
MemTotal:      1034644 kB

#In this example, the system has 1GB of RAM. Is this 1 x 1GB (or) 2 x 512MB (or) 4 x 256MB? This can be figured out by passing the type id 17 to the dmidecode command as shown below. Please note in the example below, if you have to expand upto 8GB of maximum RAM, you need to remove the existing 512MB from slot 1 and 2, and use 2GB RAM on all the 4 memory slots.

# dmidecode -t 17
# dmidecode 2.9
#SMBIOS 2.3 present.
#
#Handle 0x1100, DMI type 17, 23 bytes
#Memory Device
#        Array Handle: 0x1000
#        Error Information Handle: Not Provided
#        Total Width: 72 bits
#        Data Width: 64 bits
        Size: 512 MB  [Note: Slot1 has 512 MB RAM]
#        Form Factor: DIMM
#        Set: 1
#        Locator: DIMM_1A
#        Bank Locator: Not Specified
#        Type: DDR
#        Type Detail: Synchronous
#        Speed: 266 MHz (3.8 ns)
#
#Handle 0x1101, DMI type 17, 23 bytes
#Memory Device
#        Array Handle: 0x1000
#        Error Information Handle: Not Provided
#        Total Width: 72 bits
#        Data Width: 64 bits
        Size: 512 MB [Note: Slot2 has 512 MB RAM]
#        Form Factor: DIMM
#        Set: 1
#        Locator: DIMM_1B
#        Bank Locator: Not Specified
#        Type: DDR
#        Type Detail: Synchronous
#        Speed: 266 MHz (3.8 ns)
#
#Handle 0x1102, DMI type 17, 23 bytes
#Memory Device
#        Array Handle: 0x1000
#        Error Information Handle: Not Provided
#        Total Width: 72 bits
#        Data Width: 64 bits
        Size: No Module Installed [Note: Slot3 is empty]
#        Form Factor: DIMM
#        Set: 2
#        Locator: DIMM_2A
#        Bank Locator: Not Specified
#        Type: DDR
#        Type Detail: Synchronous
#        Speed: 266 MHz (3.8 ns)
#
#Handle 0x1103, DMI type 17, 23 bytes
#Memory Device
#        Array Handle: 0x1000
#
#        Error Information Handle: Not Provided
#        Total Width: 72 bits
#        Data Width: 64 bits
        Size: No Module Installed [Note: Slot4 is empty]
#        Form Factor: DIMM
#        Set: 2
#        Locator: DIMM_2B
#        Bank Locator: Not Specified
#        Type: DDR
#        Type Detail: Synchronous
#        Speed: 266 MHz (3.8 ns)

# 24G = 6*4G
dmidecode -t 17 | grep MB
# SMBIOS entry point at 0x7f6be000
#SMBIOS 2.5 present.
	Size: 4096 MB
	Size: 4096 MB
	Size: 4096 MB
	Size: 4096 MB
	Size: 4096 MB
	Size: 4096 MB


# =========================================================
#4. Get BIOS information using dmidecode
# =========================================================
dmidecode -t bios

# =========================================================

#-------------------------------
# physical cpus
#-------------------------------
grep "physical id" /proc/cpuinfo | sort | uniq | wc -l
#2


#============================================
# Demo2
#============================================
lscpu
#Architecture:          x86_64
#CPU op-mode(s):        32-bit, 64-bit
#Byte Order:            Little Endian
CPU(s):                2
#On-line CPU(s) list:   0,1
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             2
#NUMA node(s):          1
#Vendor ID:             GenuineIntel
#CPU family:            6
#Model:                 42
#Stepping:              7
#CPU MHz:               3001.000
#BogoMIPS:              6002.00
#Hypervisor vendor:     VMware
Virtualization type:   full
#L1d cache:             32K
#L1i cache:             32K
#L2 cache:              256K
#L3 cache:              6144K
#NUMA node0 CPU(s):     0,1
#

2=1*1*2 logical cpus
grep "processor" /proc/cpuinfo 
#processor	: 0
#processor	: 1

grep "processor" /proc/cpuinfo | wc -l
# 2

#-------------------------------
# physical cpus
#-------------------------------
grep "physical id" /proc/cpuinfo | sort | uniq | wc -l
#0
