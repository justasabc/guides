#--------------------------------------------------------------------
# ref
# http://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
#--------------------------------------------------------------------

#*****************************************
application/x-www-form-urlencoded
#*****************************************
#For application/x-www-form-urlencoded, the body of the HTTP message sent to the server is essentially one giant query string -- name/value pairs are separated by the ampersand (&), and names are separated from values by the equal symbal (=). An example of this would be:
MyVariableOne=ValueOne&MyVariableTwo=ValueTwo

#-d, --data <data>
#              (HTTP) Sends the specified data in a POST request  to  the  HTTP
#              server,  in  the  same  way  that a browser does when a user has
#              filled in an HTML form and presses the submit button. This  will
#              cause curl to pass the data to the server using the content-type
#              application/x-www-form-urlencoded.  Compare to -F, --form.
#
#              If any of these options is used more than once on the same  com‚Äê
#              mand  line,  the  data  pieces specified will be merged together
#              with a separating  &-symbol.  Thus,  using  '-d  name=daniel  -d
#              skill=lousy'  would  generate  a  post  chunk  that  looks  like
#              'name=daniel&skill=lousy'.


curl -d "firstName=Kris" \
     -d "lastName=Jordan" \
     echo.httpkit.com
#{
#  "method": "POST", ...
#  "headers": {
#    "content-length": "30",
#    "content-type":"application/x-www-form-urlencoded"
#  },
#  "body": "firstName=Kris&lastName=Jordan", ...
#}

#*****************************************
multipart/form-data
#*****************************************
#-F, --form <name=content>
#              (HTTP)  This  lets curl emulate a filled-in form in which a user
#              has pressed the submit button. This causes  curl  to  POST  data
#              using  the  Content-Type  multipart/form-data  according  to RFC
#              2388. This enables uploading of binary files etc. 
curl -F "firstName=ke" \
     -F "lastname=zunlin" \
     -F "fileupload=@example.json;type=application/json" \
     echo.httpkit.com

# "content-type": "multipart/form-data; boundary=----------------------------0e875533365d"
#  },
#  "body": "------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"firstname\"\r\n\r\nke\r\n------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"lastname\"\r\n\r\nzunlin\r\n------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"fileupload\"; filename=\"example.json\"\r\nContent-Type: text/json\r\n\r\n{\n\"firstname\":\"ke\",\n\"lastname\":\"zunlin\"\n}\n\r\n------------------------------0e875533365d--\r\n",



# for each non-alphanumeric byte that exists in one of our values, it's going to take three bytes to represent it. For large binary files, tripling the payload is going to be highly inefficient.
# That's where multipart/form-data comes in. With this method of transmitting name/value pairs, each pair is represented as a "part" in a MIME message (as described by other answers). Parts are separated by a particular string boundary (chosen specifically so that this boundary string does not occur in any of the "value" payloads). Each part has its own set of MIME headers like Content-Type, and particularly Content-Disposition, which can give each part its "name." The value piece of each name/value pair is the payload of each part of the MIME message. The MIME spec gives us more options when representing the value payload -- we can choose a more efficient encoding of binary data to save bandwidth (e.g. base 64 or even raw binary).

#Why not use multipart/form-data all the time? For short alphanumeric values (like most web forms), the overhead of adding all of the MIME headers is going to significantly outweigh any savings from more efficient binary encoding.

#The moral of the story is, if you have binary (non-alphanumeric) data (or a significantly sized payload) to transmit, use multipart/form-data. Otherwise, use application/x-www-form-urlencoded.

#Conclusion
#**************************************************************************
# The content type "application/x-www-form-urlencoded" is inefficient for sending large quantities of binary data or text containing non-ASCII characters. The content type "multipart/form-data" should be used for submitting forms that contain files, non-ASCII data, and binary data.
#**************************************************************************
