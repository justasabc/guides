# http://www.ibm.com/developerworks/cn/cloud/library/cl-openstack-network/
# https://www.frozentux.net/iptables-tutorial/iptables-tutorial.html
# http://www.thegeekstuff.com/2011/01/iptables-fundamentals/
# http://www.thegeekstuff.com/2011/01/redhat-iptables-flush/
# http://www.thegeekstuff.com/2011/02/iptables-add-rule/
# http://www.thegeekstuff.com/2011/03/iptables-inbound-and-outbound-rules/
# http://www.thegeekstuff.com/2011/06/iptables-rules-examples/
# https://help.ubuntu.com/community/IptablesHowTo
# http://askubuntu.com/questions/119393/how-to-save-rules-of-the-iptables

# the structure is: iptables -> Tables -> Chains -> Rules

#****************************************************
#A. iptables list
#****************************************************
# filter nat mangle raw
iptables --list
iptables -t filter --list
#Chain INPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain FORWARD (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain OUTPUT (policy ACCEPT)
#target     prot opt source               destination 

iptables -t nat --list
#Chain PREROUTING (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain INPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain OUTPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain POSTROUTING (policy ACCEPT)
#target     prot opt source               destination   

iptables -t mangle --list
#Chain PREROUTING (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain INPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain FORWARD (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain OUTPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain POSTROUTING (policy ACCEPT)
#target     prot opt source               destination  

iptables -t raw --list
#Chain PREROUTING (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain OUTPUT (policy ACCEPT)
#target     prot opt source               destination  

#****************************************************
#B. IPTables Flush: Delete / Remove All Rules On RedHat and CentOS Linux
#****************************************************
#Temporarily delete all the firewall rules
#Use ‘iptables –flush’ option to delete all the rules temporarily.
service ufw status
server ufw start

iptables --flush
iptables --F
iptables --list
iptables --list

#****************************************************
#C. Linux IPTables: How to Add Firewall Rules (With Allow SSH Example)
#****************************************************

#======================================================
# 1. Delete Existing Rules
#======================================================
# Delete all the existing rules and allow the firewall to accept everything. Use iptables flush as we discussed earlier to clean-up all your existing rules and start from scratch.
iptables flush

#======================================================
#2. Allow only SSH
#======================================================
#Allow only the incoming SSH connection to this server. You can ssh to this server from anywhere.

iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT
#The above iptables command has the following 4 components.

#“-A INPUT” – This indicates that we are appending a new rule (or adding) to the INPUT chain. So, this rule is for incoming traffic.
#“-i eth0″ – Incoming packets through the interface eth0 will be checked against this rule.
#“-p tcp –dport 22″ – This rule is for TCP packets. This has one tcp option called “–dport 22″, which indicates that the destination port for this rule on the server is 22 (which is ssh).
#“-j ACCEPT” – Jump to accept, which just ACCEPTS the packet.

#In simple terms the above rule can be stated as: All incoming packets through eth0 for ssh will be accepted.

#======================================================
#3. Drop all Other Packets
#======================================================
#
#Once you’ve specified your custom rules to accept packets, you should also have a default rule to drop any other packets.
#
#This should be your last rule in the INPUT chain.
#
#To drop all incoming packets, do the following.

iptables -A INPUT -j DROP

#======================================================
#4. View the SSH rule and Test
#======================================================
iptables --list
iptables -L
iptables -L INPUT
#Chain INPUT (policy ACCEPT)
#target     prot opt source               destination         
#ACCEPT     tcp  --  anywhere             anywhere             tcp dpt:ssh
#DROP       all  --  anywhere             anywhere 

#As you see from the above output, it has the following two rules in sequence.
#
#Accept all incoming ssh connections
#Drop all other packets.

#Instead of adding the firewall rules from the command line, it might be better to create a shell script that contains your rules as shown below.

vim iptables.sh
iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT
iptables -A INPUT -j DROP

sh -x iptables.sh 
#+ iptables -A INPUT -i eth0 -p tcp --dport 22 -j ACCEPT
#+ iptables -A INPUT -j DROP

iptables -L INPUT

#****************************************************
#D.Linux IPTables: Incoming and Outgoing Rule Examples (SSH and HTTP)
#****************************************************
#The default policy of a chain is ACCEPT.
# So, both the INPUT and OUTPUT chain’s default policy is ACCEPT
iptables -L 
#Chain INPUT (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain FORWARD (policy ACCEPT)
#target     prot opt source               destination         
#
#Chain OUTPUT (policy ACCEPT)
#target     prot opt source               destination   

#So, you have two options here.

#Option 1: Add drop rules

#At the end, add the following three drop rules that will drop all incoming, outgoing, and forward packets (except those that are defined above these three rules). If you do this, the default chain policy is still ACCEPT, which shouldn’t matter, as you are dropping all the packets at the end anyway.

iptables -A INPUT -j DROP
iptables -A OUTPUT -j DROP
iptables -A FORWARD -j DROP

#Option 2: Change the default chain policy to DROP

#At the beginning, execute the following three commands that will change the chain’s default policy to DROP.

iptables -P INPUT DROP
iptables -P OUTPUT DROP
iptables -P FORWARD DROP


#Allow Incoming Connections
#
#When the default policy is DROP for INPUT and OUTPUT chains, for every incoming firewall rule, you need to specify the following two rules.
#
#Request rule: This is the request that comes from the client to the server for the incoming connection.
#Response rule: This is for the response that goes out from the server to the client (for the corresponding incoming request).
#*************************************************
#Example 1: Allow incoming SSH connection
#*************************************************
#
#This is to allow SSH connection from outside to your server. i.e You can ssh to your server from outside.
#
#This involves two steps. First, we need to allow incoming new SSH connections. Once the incoming ssh connection is allowed, we also need to allow the response back for that incoming ssh connection.
#
#First, Allow incoming SSH connection request, as shown below.
iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
#In the above example:
#
#iptables -A INPUT: Append the new rule to the INPUT chain. For incoming connection request, this always has to be INPUT.
#-i eth0: This refers to the input interface. For incoming connections, this always has to be ‘-i’.
#-p tcp: Indicates that this is for TCP protocol.
#–dport 22: This refers to the destination port for the incoming connection. Port 22 is for ssh.
#-m state: This indicates that the “state” matching module is used. We’ll discuss more about “-m” option (and all available matching modules for iptables) in future article.
#–state NEW, ESTABLISHED: Options for the “state” matching module. In this example, only NEW and ESTABLISHED states are allowed. The 1st time when a SSH connection request is initiated from the client to the server, NEW state is used. ESTABLISHED state is used for all further request from the client to the server.

#Next, Allow outgoing (ESTABLISHED state only) SSH connection response (for the corresponding incoming SSH connection request).
iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
#In the above example:
#
#iptables -A OUTPUT: Append the new rule to the OUTPUT chain. Since this is for the response rule (for the corresponding incoming request) that goes out from the server, this should be OUTPUT.
#-o eth0: This refers the output interface. For outgoing connections, this always has to be ‘-o’.
#-p tcp: Indicates that this is for TCP protocol.
#–sport 22: This refers to the source port for the outgoing connection. Port 22 is for ssh. Since the incoming request (from the previous rule) came to the “destination” port, the outgoing response will go through the “source” port.
#-m state: This indicates that the “state” matching module is used.
#–state ESTABLISHED: Since this is a response rule, we allow only ESTABLISHED connection (and not any NEW connection).


#*************************************************
#Example 2: Allow incoming HTTP connection
#*************************************************
iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT


#Allow Outgoing Connections
#
#When the default policy is DROP for the INPUT and OUTPUT chains, for every outgoing firewall rule, you need to specify the following two rules.
#
#Request rule: This is the request that goes out from the server to outside for the outgoing connection.
#Response rule: This is for the response that comes back from the outside to the server (for the corresponding outgoing request).


#*************************************************
#Example 3: Allow outgoing SSH connection
#*************************************************
iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT

#Putting it all together
#
#Create rules.sh shell script which does the following:
#
#Delete all existing rules
#Set default chain policies
#Allow inbound SSH
#Allow inbound HTTP
#Allow outbound SSH
#First, create the rules.sh

vim rules.sh
#================================================================================================
# 1. Delete all existing rules
iptables -F

# 2. Set default chain policies
#iptables -P INPUT DROP
#iptables -P FORWARD DROP
#iptables -P OUTPUT DROP
iptables -P INPUT ACCEPT
iptables -P FORWARD ACCEPT
iptables -P OUTPUT ACCEPT

# 3. Allow incoming SSH
iptables -A INPUT -i eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT

# 4. Allow incoming HTTP
iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A OUTPUT -o eth0 -p tcp --sport 80 -m state --state ESTABLISHED -j ACCEPT

# 5. Allow outgoing SSH
iptables -A OUTPUT -o eth0 -p tcp --dport 22 -m state --state NEW,ESTABLISHED -j ACCEPT
iptables -A INPUT -i eth0 -p tcp --sport 22 -m state --state ESTABLISHED -j ACCEPT
#================================================================================================
