#--------------------------------------------------------------------
# ref
# https://httpkit.com/resources/HTTP-from-the-Command-Line/
#--------------------------------------------------------------------

#********************************************************************
#Make a Request
#********************************************************************
curl http://echo.httpkit.com
#{
#  "method": "GET",
#  "uri": "/",
#  "path": {
#    "name": "/",
#    "query": "",
#    "params": {}
#  },
#  "headers": {
#    "x-forwarded-for": "162.105.17.48",
#    "host": "echo.httpkit.com",
#    "user-agent": "curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3",
#    "accept": "*/*"
#  },
#  "body": null,
#  "ip": "127.0.0.1",
#  "powered-by": "http://httpkit.com",
#  "docs": "http://httpkit.com/echo"

curl http://echo.httpkit.com/path?query=string
#{ ...
#  "uri": "/path?query=string",
#  "path": {
#    "name": "/path",
#    "query": "?query=string",
#    "params": {
#      "query": "string"
#    }
#  }, ...
#}

#********************************************************************
#Set the Request Method
#********************************************************************
curl -X POST echo.httpkit.com
#{
#    "method": "POST",
#    ...
#}

curl -X DELETE echo.httpkit.com
#{
#    "method": "DELETE",
#    ...
#}

#********************************************************************
#Set Request Headers
#********************************************************************
curl -H "Authorization: OAuth 2c4419d1aabeec" \
     http://echo.httpkit.com

#{...
#"headers": {
#    "host": "echo.httpkit.com",
#    "authorization": "OAuth 2c4419d1aabeec",
#  ...},
#...}

curl -H "Accept: application/json" \
     -H "Authorization: OAuth 2c3455d1aeffc" \
     http://echo.httpkit.com

#{ ...
#  "headers": { ...
#    "host": "echo.httpkit.com",
#    "accept": "application/json",
#    "authorization": "OAuth 2c3455d1aeffc" 
#   }, ...
#}

#********************************************************************
#Send a Request Body
#********************************************************************
#Many popular HTTP APIs today POST and PUT resources using application/json or application/xml rather than in an HTML form data. 

curl -X PUT \
     -H 'Content-Type: application/json' \
     -d '{"firstName":"Kris", "lastName":"Jordan"}' \
     echo.httpkit.com

#{
#   "method": "PUT", ...
#   "headers": { ...
#     "content-type": "application/json",
#     "content-length": "40"
#   },
#   "body": "{\"firstName\":\"Kris\",\"lastName\":\"Jordan\"}",
#   ...
# }

#********************************************************************
#Use a File as a Request Body
#********************************************************************
# Escaping JSON/XML at the command line can be a pain and sometimes the body payloads are large files. Luckily, cURL’s @xxx macro makes it easy to read in the contents of a file. If we had the above example’s JSON in a file named “example.json” we could have run it like this, instead:
cat example.json
#{
#"firstname":"ke",
#"lastname":"zunlin"
#}
#
curl -X PUT \
     -H 'Content-Type: application/json' \
     -d @example.json \
     echo.httpkit.com

# "content-type": "application/json",
#    "content-length": "38"
#  },
#  "body": "{\"firstname\":\"ke\",\"lastname\":\"zunlin\"}",

#********************************************************************
#POST HTML Form Data
#********************************************************************
curl -d "firstName=Kris" \
     -d "lastName=Jordan" \
     echo.httpkit.com
#{
#  "method": "POST", ...
#  "headers": {
#    "content-length": "30",
#    "content-type":"application/x-www-form-urlencoded"
#  },
#  "body": "firstName=Kris&lastName=Jordan", ...
#}

# Notice the method is POST even though we did not specify it. When curl sees form field data it assumes POST. You can override the method using the -X flag discussed above. The “Content-Type” header is also automatically set to “application/x-www-form-urlencoded” so that the web server knows how to parse the content. Finally, the request body is composed by URL encoding each of the form fields.

#********************************************************************
#POST HTML Multipart / File Forms
#********************************************************************
# What about HTML forms with file uploads? As you know from writing HTML file upload form, these use a multipart/form-data Content-Type, with the enctype attribute in HTML. In cURL we can pair the -F option and the @readFile macro.
curl -F "firstName=ke" \
     -F "lastname=zunlin" \
     -F "fileupload=@example.json;type=application/json" \
     echo.httpkit.com

# "content-type": "multipart/form-data; boundary=----------------------------0e875533365d"
#  },
#  "body": "------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"firstname\"\r\n\r\nke\r\n------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"lastname\"\r\n\r\nzunlin\r\n------------------------------0e875533365d\r\nContent-Disposition: form-data; name=\"fileupload\"; filename=\"example.json\"\r\nContent-Type: text/json\r\n\r\n{\n\"firstname\":\"ke\",\n\"lastname\":\"zunlin\"\n}\n\r\n------------------------------0e875533365d--\r\n",

#********************************************************************
#Test Virtual Hosts, Avoid DNS
#********************************************************************
curl -H "Host: google.com" 50.112.251.120
#{
#  "method": "GET", ...
#  "headers": {
#    "host": "google.com", ...
#  }, ...
#}

#********************************************************************
# View Response Headers
#********************************************************************
curl echo.httpkit.com 

curl -i echo.httpkit.com 
#HTTP/1.1 200 OK
#Server: nginx/1.1.19
#Date: Fri, 15 Nov 2013 11:58:09 GMT
#Content-Type: application/json; charset=utf-8
#Content-Length: 448
#Connection: keep-alive
#X-Powered-By: http://httpkit.com
#Vary: Accept-Encoding
#
#{
#  "method": "GET",
#  "uri": "/",
#  "path": {
#    "name": "/",
#    "query": "",
#    "params": {}
#  },
#  "headers": {
#    "x-forwarded-for": "162.105.17.48",
#    "host": "echo.httpkit.com",
#    "user-agent": "curl/7.22.0 (x86_64-pc-linux-gnu) libcurl/7.22.0 OpenSSL/1.0.1 zlib/1.2.3.4 libidn/1.23 librtmp/2.3",
#    "accept": "*/*"
#  },
#  "body": null,
#  "ip": "127.0.0.1",
#  "powered-by": "http://httpkit.com",
#  "docs": "http://httpkit.com/echo"

curl -I echo.httpkit.com 
#HTTP/1.1 200 OK
#Server: nginx/1.1.19
#Date: Fri, 15 Nov 2013 11:59:45 GMT
#Content-Type: application/json; charset=utf-8
#Content-Length: 449
#Connection: keep-alive
#X-Powered-By: http://httpkit.com
#Vary: Accept-Encoding


#-i, --include
#              (HTTP)  Include  the  HTTP-header in the output. The HTTP-header
#              includes things like server-name, date of  the  document,  HTTP-
#              version and more...

#-I, --head
#              (HTTP/FTP/FILE) Fetch the HTTP-header only! HTTP-servers feature
#              the command HEAD which this uses to get nothing but  the  header
#              of  a  document.  When used on a FTP or FILE file, curl displays
#              the file size and last modification time only.

curl -d '{"auth": {"tenantName": "admin", "passwordCredentials":{"username": "admin", "password": "kezunlin"}}}' -H "Content-type: application/json" http://127.0.0.1:35357/v2.0/tokens | python -mjson.tool
