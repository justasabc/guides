#-----------------------------------------------------------
# https://help.ubuntu.com/community/KVM/Installation
# http://www.howtogeek.com/117635/
# http://blog.csdn.net/starshine/article/details/6990599
# http://www.sysprobs.com/disable-enable-virtualization-technology-bios
# http://www.linux-kvm.org/page/FAQ#How_can_I_tell_if_I_have_Intel_VT_or_AMD-V.3F
# http://askubuntu.com/questions/103965/how-to-determine-if-cpu-vt-extensions-enabled-in-bios
#-----------------------------------------------------------

#If you’re using Linux, you don’t need VirtualBox or VMware to create virtual machines. You can use KVM – the kernel-based virtual machine – to run both Windows and Linux in virtual machines.

#You can use KVM directly or with other command-line tools, but the graphical Virtual Machine Manager (Virt-Manager) application will feel most familiar to people that have used other virtual machine programs.

#==========================================
#Pre-installation checklist
#==========================================
#Check that your CPU supports hardware virtualization
#To run KVM, you need a processor that supports hardware virtualization. Intel and AMD both have developed extensions for their processors, deemed respectively Intel VT-x (code name Vanderpool) and AMD-V (code name Pacifica). To see if your processor supports one of these, you can review the output from this command:

## 1)Whether linux kernel >=2.6.15
#/proc/cpuinfo only shows virtualization capabilities starting with Linux 2.6.15 (Intel) and Linux 2.6.16 (AMD). Use the `uname -r` command to query your kernel version.
uname -r
#3.2.0-29-generic

# 3.2>2.6

## 2)Whether support virtualization
egrep -c "(svm|vmx)" /proc/cpuinfo
#16

#If 0 it means that your CPU doesn't support hardware virtualization.
#If 1 or more it does - but you still need to make sure that virtualization is enabled in the BIOS.

# OR
lscpu | grep Virtualization
#Virtualization:        VT-x

#OR
apt-get install cpu-checker 
kvm-ok
#INFO: /dev/kvm does not exist
#HINT:   sudo modprobe kvm_intel
#INFO: Your CPU supports KVM extensions
#KVM acceleration can be used

## 3)Whether enabled virtualization in bios
kvm-ok
#INFO: /dev/kvm does not exist
#HINT:   sudo modprobe kvm_intel
#INFO: Your CPU supports KVM extensions
#KVM acceleration can be used

# how to enable
# manually enable it in bios
Intel(R) Virtualization Tech [Enabled]
VT-d [Enabled]
#******************************************************
#******************************************************
#Enabling virtualization extensions in BIOS
#Reboot the computer and open the system's BIOS menu. This can usually be done by pressing the delete key, the F1 key or Alt and F4 keys depending on the system.
#Enabling the virtualization extensions in BIOS
#Open the Processor submenu The processor settings menu may be hidden in the Chipset, Advanced CPU Configuration or Northbridge.
#Enable Intel Virtualization Technology (also known as Intel VT-x). AMD-V extensions cannot be disabled in the BIOS and should already be enabled. The virtualization extensions may be labeled Virtualization Extensions, Vanderpool or various other names depending on the OEM and system BIOS.
#Enable Intel VT-d or AMD IOMMU, if the options are available. Intel VT-d and AMD IOMMU are used for PCI device assignment.
#Select Save & Exit.
#Reboot the machine.
#******************************************************
#******************************************************
apt-get install kvm qemu

# temporarily load intel module(depends on kvm module)
modprobe kvm_intel

# permanently load intel module
vim /etc/modules
#****************************************
#****************************************
# added by ke on 2013/11/25
kvm_intel
#****************************************
#****************************************

lsmod | grep kvm_intel
#kvm_intel             137721  0 
#kvm                   415549  1 kvm_intel

# view results
kvm-ok
#INFO: /dev/kvm exists
#KVM acceleration can be used

#==========================================
#Use a 64 bit kernel (if possible)
#==========================================

#Running a 64 bit kernel on the host operating system is recommended but not required.
#To serve more than 2GB of RAM for your VMs, you must use a 64-bit kernel (see 32bit_and_64bit). On a 32-bit kernel install, you'll be limited to 2GB RAM at maximum for a given VM.
#Also, a 64-bit system can host both 32-bit and 64-bit guests. A 32-bit system can only host 32-bit guests.
#To see if your processor is 64-bit, you can run this command:
egrep -c " lm " /proc/cpuinfo
16
#If 0 is printed, it means that your CPU is not 64-bit.
#If 1 or higher, it is. Note: lm stands for Long Mode which equates to a 64-bit CPU.

#Now see if your running kernel is 64-bit, just issue the following command:
uname -m
x86_64

lscpu
#x86_64 indicates a running 64-bit kernel. If you use see i386, i486, i586 or i686, you're running a 32-bit kernel.
#Note: x86_64 is synonymous with amd64.

#==========================================
#Install Necessary Packages
#==========================================
apt-get -y install libvirt-bin

# make sure libvirtd running
service libvirt-bin status

# The above command will create 2 groups: kvm and libvirtd
ls /etc/group
#kvm:x:130:
#libvirtd:x:131:ke

# add current user(root) to libvirtd
adduser root libvirtd
#Adding user `root' to group `libvirtd' ...
#Adding user root to group libvirtd
#Done.
# or
adduser 'id -un' libvirtd

cat /etc/group | grep libvirtd
#libvirtd:x:131:ke,root

# Optional
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
# Install vmbuilder
#The name of the package that we need to install is python-vm-builder:
# Old version is ubuntu-vm-builder
#apt-get install -y ubuntu-vm-builder
apt-get install -y python-vm-builder
vmbuilder

apt-get install -y virt-manager virt-viewer
virt-manger
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
#~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

# After the installation, you need to relogin so that your user becomes an effective member of libvirtd user groups. The members of this group can run virtual machines.

# Verify KVM running successfully
# Log out and log back again

#After running this command, log out and log back in. Run this command after logging back in and you should see an empty list of virtual machines. This indicates that everything is working correctly.
virsh -c qemu:///system list
# Id Name                 State
#----------------------------------

# if virsh hang up
killall -9 dmidecode
