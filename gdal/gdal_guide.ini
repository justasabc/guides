# There are 3 ways to use gdal : compile from souce or install FWTools which has compiled gdal
# 1 Install FWTools
Download FWTools at http://home.gdal.org/fwtools/FWTools247.exe
Install FWTools.
# Total 9 dlls
# The core gdal dll exist in FWTools\bin\gdal_fw.dll
# The 4 *_csharp dll for c# exist in FWTools\csharp\
# The 4 *_wrap dll for c# exist in FWTools\bin\
Add C:\Program Files\FWTools2.4.7\bin to System Path so that C# program can access 4 *_wrap dlls.
My Computer--->Property--->Advanced System Setting--->System Property--->Environment Variable--->System Variable--->Path(add to the front)
For c++ application,add FWTools\include and FWTools\lib to Include Directories and Library Directories.
For c# application, add reference to the 4 dll with postfix _csharp: gdal_csharp.dll,gdalconst_csharp.dll,ogr_csharp.dll,osr_csharp.dll (FWTools\csharp\)
(Copy 4 *_csharp dll to Debug\)

# 3 Download gdal binary packages
http://www.gisinternals.com/sdk/


# 2 Compile gdal from source  Step by step
Download gdal191.zip at http://trac.osgeo.org/gdal/wiki/DownloadSource
Choose http://download.osgeo.org/gdal/gdal191.zip
Unzip to C:\gdal191\gdal-1.9.1\
StartMenu--->Microsoft Visual Studio 2010--->Visual Studio Tools--->Visual STudio Command Prompt

# 2.1 Compile for c++
cd C:\gdal191\gdal-1.9.1
nmake /f makefile.vc
nmake /f makefile.vc install  
# bin data html
nmake /f makefile.vc devinstall  
# include lib (used for c and c++)
# Default GDAL_HOME=C:\warmerda\bld\ now has five dirs: bin data html include lib. GDAL_HOME\bin\gdal19.dll is the core dll.
Add C:\warmerda\bld\bin\ to System Path so that our programs can find gdal19.dll.

# 2.1.1 How to use with c++ program
Start VS2010 and New a c++ win32 console application.
Property Page--->Configuration Property--->VC++ Directories
Add GDAL_HOME\include to Include Directories and GDAL_HOME\lib to Library Directories.
# (Optional)Add gdal_i.lib to Additional Dependencies.
# Copy gdal19.dll to Debug/ or Release/

# 2.1.2 Sample Code with c# using gdal
// TestGDAL_CPP.cpp : Defines the entry point for the console application.
//

#include "stdafx.h"

#pragma comment (lib,"gdal_i.lib") //C:\GDAL\lib 
#include "gdal_priv.h"//C:\GDAL\include
#include <iostream>
using namespace std;

int _tmain(int argc, _TCHAR* argv[])
{
	GDALDataset *poDataset;
	GDALAllRegister();
	poDataset = (GDALDataset *) GDALOpen( "C:\\1.bmp", GA_ReadOnly );
	if( poDataset != NULL )
	{
		cout<<"RasterXSize:"<<poDataset->GetRasterXSize()<<endl;
		cout<<"RasterYSize:"<<poDataset->GetRasterYSize()<<endl;
		cout<<"RasterCount:"<<poDataset->GetRasterCount()<<endl;
	}
	return 0;
}


# 2.2 Compile for c#(csharp)
cd C:\gdal191\gdal-1.9.1\swig\csharp
nmake /f makefile.vc
# This compile will generate 8 dll files: gdal_csharp.dll,gdalconst_csharp.dll,ogr_csharp.dll,osr_csharp.dll,gdal_wrap.dll,gdalconst_wrap.dll,ogr_wrap.dll,osr_wrap.dll.
Copy the 8 dll files to GDAL_HOME\bin\.
# The core step of using gdal with c# is to ensure c# program can access the 9 dlls in GDAL_HOME\bin. 

# 2.2.1 How to use with c#(csharp)
Start VS2010 and New a c# Window Application
Add reference to the 4 dll with postfix _csharp: gdal_csharp.dll,gdalconst_csharp.dll,ogr_csharp.dll,osr_csharp.dll 
#OR copy these 4 dlls to Debug/

Add the following code to Form1_Load()
# 2.2.2 Sample Code with c# using gdal
try
            {
                OSGeo.GDAL.Gdal.AllRegister();
                String filePath = @"C:\1.bmp";
                OSGeo.GDAL.Dataset dataSet = OSGeo.GDAL.Gdal.Open(filePath, OSGeo.GDAL.Access.GA_ReadOnly);
                int w = dataSet.RasterXSize;
                int h = dataSet.RasterYSize;
                MessageBox.Show("image width=" + w + ",height=" + h);
            }
            catch (Exception err)
            {
                MessageBox.Show(err.Message);
            }


# 2.3 Conclusion
The core of gdal is writen in c and c++, so c++ compiler is needed to compile the gdal source code.
It's best to add GDAL_HOME\bin to system path so that our programs can find gdal19.dll. 
Of the 9 dlls, the gdal19.dll is the core one.
In c# program,the 4 dlls postfixed with _csharp should be referenced(copyed to debug or release).
The 1 dll or 9 dlls should be copyed to the final program bin/debug or bin/release when deploying. 

