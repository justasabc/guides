# a quick guide to configure uwsgi with nginx and django

# ref
# ----------------------------------------------------------------------
# https://uwsgi.readthedocs.org/en/latest/tutorials/Django_and_nginx.html

# http://blog.richard.do/index.php/2013/04/setting-up-nginx-django-uwsgi-a-tutorial-that-actually-works/
# ----------------------------------------------------------------------

# A Web Server Gateway Interface - WSGI - does this job. WSGI is a Python standard.  uWSGI is a WSGI implementation. 

# the web client <-> the web server <-> the socket <-> uwsgi <-> Django

# the finally layout
(env)root@ubuntu:/var/www/gis/mysite# tree .
.
├── demo.db
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── polls
    ├── admin.py
    ├── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py

# env
# /var/www/gis/env/
# /var/www/gis/env/bin/activate

# static 
# /var/www/gis/static
# media 
# /var/www/gis/media

# mysite
# /var/www/gis/mysite/mysite/settings.py
# /var/www/gis/mysite/mysite/wsgi.py

# polls
# /var/www/gis/mysite/polls/models.py

mkdir gis
cd gis
virtualenv env 
source env/bin/activate

pip install django
pip install uwsgi

django-admin.py startproject mysite
cd mysite
python manage.py startapp polls
# ...


# uwsgi configuration
vim gis/test.py

# 1) test python 
# test.py
#def application(env, start_response):
#    start_response('200 OK', [('Content-Type','text/html')])
#    return "Hello World"

uwsgi --http :8000 --wsgi-file test.py
# localhost:8000
# Hello World

# If so, it means the following stack of components works:
# the web client <-> uWSGI <-> Python


# 2) test django
# Now we want uWSGI to do the same thing, but to run a Django site instead of the test.py module.

# If you haven’t already done so, make sure that your mysite project actually works:
python manage.py runserver 0.0.0.0:8000
# Crtl+C to exit

# And if it that works, run it using uWSGI:
uwsgi --http :8000 --module mysite.wsgi
# localhost:8000/admin

#if the site appears, it means uWSGI is able serve your Django application from your virtualenv, and this stack operates correctly:

# the web client <-> uWSGI <-> Django


# nginx configure
apt-get install nginx
service nginx start
# localhost:80
# Welcome to nginx!

# That means these components of the full stack are working together:

# the web client <-> the web server

vim gis_nignx.conf
# ref /var/www/gis/gis_nginx.conf

# link gis_nginx.conf to /etc/nginx/conf.d/
ln -s /var/www/gis/gis_nginx.conf /etc/nginx/conf.d/
# so that /etc/nginx/nginx.conf can use it 
# because it include these two folders: conf.d and sites-enabled
include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;

# use unix sockets instead of ports 
vim /var/www/gis/gis_nignx.conf
# ...

#server 127.0.0.1:8001; 
server unix:/tmp/uwsgi.sock; 
#server unix:///tmp/uwsgi.sock; # /// are OK 
#server unix:/var/www/gis/uwsgi.sock; 

# 1) python
uwsgi --socket /tmp/uwsgi.sock --wsgi-file test.py
# WARNING: 
# if that doesn’t work
#Check your nginx error log(/var/log/nginx/error.log). If you see something like:
#connect() to unix:///path/to/your/mysite/mysite.sock failed (13: Permission denied)
uwsgi --socket /tmp/uwsgi.sock  --wsgi-file test.py --chmod-socket=666
# localhost
# Hello World

# 2) django
uwsgi --socket /tmp/uwsgi.sock --module mysite.wsgi --chmod-socket=666
# localhost/admin

# Configuring uWSGI to run with a .ini file
vim /var/www/gis/gis_uwsgi.ini
# ...

#And run uswgi using this file:
uwsgi --ini mysite_uwsgi.ini

# Emperor Mode: for multi-apps
# create an instance for every config file
# ln source dest must be ABSOLUTE path
ln -s /var/www/gis/gis_uwsgi.ini /etc/uwsgi/conf.d/

uwsgi --emperor /etc/uwsgi/conf.d 

# localhost/admin
# Problem?
# Pages have no css,javascript and images, only texts!!!
# ref
# ----------------------------------------------------------------------
# http://grokcode.com/784/how-to-setup-a-linux-nginx-uwsgi-python-django-server/
# ----------------------------------------------------------------------

# In order to have Nginx serve the static files, they need to be collected to /var/www/<app-name>/static. In settings.py point your STATIC_ROOT to that static directory, then verify that STATIC_URL and STATICFILES_DIRS are properly set up. Get any changes from the repository, then:

# static files management
vim mysite/settings.py
MEDIA_ROOT = '/var/www/gis/media/'
MEDIA_URL = '/meida/'
STATIC_ROOT = '/var/www/gis/static/'
STATIC_URL = '/static/'

source /var/www/git/env/bin/activate
cd /var/www/git/mysite/ 
python manage.py collectstatic

# collect all statics files to /var/www/gis/static/
# in fact , create a admin/ in static/
# Pages have css now
# you should now see css, javascript, and image files being loaded
