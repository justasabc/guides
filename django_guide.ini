# a quick guide to django
# https://docs.djangoproject.com/en/1.5/

apt-get install python
apt-get install python-pip python-setuptools
apt-get install uwsgi uwsgi-plugin-python
apt-get install nginx

pip install virtualenv
pip install virtualenvwrapper
mkdir gis
cd gis
virtualenv env
# make sure we are in env
pip install django
python -c "import django; print(django.get_version())"
# 1.5.4
pip freeze 

# https://docs.djangoproject.com/en/1.5/intro/tutorial01/
django-admin.py startproject mysite
# layout
mysite/
    manage.py
    mysite/
        __init__.py
        settings.py
        urls.py
        wsgi.py

# start server
python manage.py runserver
python manage.py runserver 8080
python manage.py runserver 0.0.0.0:8080

# Now that the server’s running, visit http://127.0.0.1:8000/ with your Web browser. You’ll see a “Welcome to Django” page, in pleasant, light-blue pastel. It worked!

vim settings.py
        'ENGINE': 'django.db.backends.sqlite3', 
        'NAME': 'demo.db',                      

python manage.py syncdb  
# django superuser (admin,admian,zunlin1234@gmail.com)

# The syncdb command looks at the INSTALLED_APPS setting in your settings.py file, and creates any necessary database tables that don’t exist for apps according to the database settings.


python manage.py startapp polls
vim polls/models.py
# ...
vim settings.py
# add 'polls'to INSTALLED_APPS 

python manage.py syncdb  

# activate the admin site
# Uncomment "django.contrib.admin" in the INSTALLED_APPS setting.
python manage.py syncdb  

vim mysite/urls.py
# ...

python manage.py runserver

# Now, open a Web browser and go to “/admin/” on your local domain – e.g., http://127.0.0.1:8000/admin/. You should see the admin’s login screen:

# Make the poll app modifiable in the admin
touch polls/admin.py
vim polls/admin.py
# ...

python manage.py runserver


# finally layout of mysite
(env)root@ubuntu:/var/www/gis/mysite# tree .
.
├── demo.db
├── manage.py
├── mysite
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
└── polls
    ├── admin.py
    ├── __init__.py
    ├── models.py
    ├── tests.py
    └── views.py

#2 directories, 11 files


# static files management
vim mysite/settings.py
MEDIA_ROOT = '/var/www/gis/media/'
MEDIA_URL = '/meida/'
STATIC_ROOT = '/var/www/gis/static/'
STATIC_URL = '/static/'

python manange.py collectstatic
# collect all statics files to /var/www/gis/static/
# in fact , create a admin/ in static/


# Customizing your project’s templates
# Keeping your templates within the project is a good convention to follow
cd gis/mysite
mkdir templates
cd templates
mkdir admin

cp ../../env/lib/python2.7/site-packages/django/contrib/admin/templates/admin/base_site.html admin/
# gis/mysite/templates/admin/base_site.html

vim mysite/settings.py

TEMPLATE_DIRS = (
    '/var/www/gis/mysite/templates',
)

# if errors,
vim /var/log/uwsgi/gis_uwsgi.log
vim /var/log/nginx/error.log


# by default, Django automatically looks for a templates/ subdirectory within each application package, for use as a fallback (don’t forget that django.contrib.admin is an application).


# Customize the admin index page

