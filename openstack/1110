# COMMON PRACTICE
apt-get -y install bridge-utils
apt-get -y install ethtool
lshw -class network
ethtool eth0
lspci | grep  net


brctl show

dpkg -i package.deb

# ssh scp 
#how to change default ssh port (default port for ssh and scp is 22)
/etc/ssh/sshd_config
/etc/init.d/ssh restart

# by default,no ssh is installed.
apt-get -y install openssh-client
apt-get -y install openssh-server

# ubuntu and ubuntu test (116,170,107)
ssh -p 22 ke@192.168.1.170
ssh -p 22 ke@192.168.1.116
scp -P 22 ke@192.168.1.170:/home/ke/file /home/ke/

# wangrui ubuntu(162.105.17.91,192.168.1.199,wangrui,asdf1234,ssh port 7222)
ssh -p 7222 wangrui@162.105.17.91

# how to exit ssh
exit

# vncviewer vncserver
apt-get -y install tightvncserver 
apt-get -y install xtightvncviewer 

# port 5900









#UBUNTUTEST  install openstack manually
apt-get update
apt-get -y upgrade

# dependencies : python-software-properties,python-mysqldb
apt-cache python-software-properties
apt-cache policy python-mysqldb
# install dependencies
apt-get install -y python-software-properties
apt-get install -y python-greenlet python-mysqldb
# if no python-mysqldb,then glance will fail when start.

apt-get -y install bridge-utils
apt-get -y install apt-rdepends
apt-rdepends mysql-server | grep python

# configure network interfaces
# see /etc/network/interfaces
# ...
#Check if network forwarding is enabled
echo 1 > /proc/sys/net/ipv4/ip_forward
sysctl net.ipv4.ip_forward
# restart network
/etc/init.d/networking restart


# install packages
apt-get -y install ntp
vim /etc/ntp.conf
server ntp.ubuntu.com
# KZL
server 127.127.1.0
fudge 127.127.1.0 stratum 10
service ntp restart
# /etc/init.d/ntp restart
ps -e | grep ntp


# install db mysql
apt-get -y install mysql-server
#mysql account (user,password)=(root,rootpass)
# tcp default port 3306
vim /etc/mysql/my.cnf
#bind-address           = 127.0.0.1
#KZL
bind-address            = 0.0.0.0
skip-name-resolve
# sed -i 's/127.0.0.1/0.0.0.0/g' /etc/mysql/my.cnf
service mysql restart
# /etc/init.d/mysql restart
stop mysql
start mysql
ps -e | grep mysql

# mysql 
mysql -h localhost -u root -prootpass
CREATE DATABASE nova;
# change the 'root' password to 'rootpass' and grant all privileges.
# IDENTIFIED BY equals to SET PASSWORD FOR 
GRANT ALL PRIVILEGES ON *.* TO root@localhost IDENTIFIED BY 'rootpass' WITH GRANT OPTION;
SET PASSWORD FOR root@localhost =PASSWORD('rootpass')
# root@'%' means root from any host.
GRANT ALL PRIVILEGES ON *.* TO root@'%' IDENTIFIED BY 'rootpass' WITH GRANT OPTION;
FLUSH PRIVILEGES;
# SELECT ALL USERS
use mysql;
select Host,User,Password from user;

# If the passwords for user 'root' are different from each other ,then issue the following command 
UPDATE mysql.user SET Password=PASSWORD('rootpass') WHERE User='root';
FLUSH PRIVILEGES;
quit;




# install important packages
apt-get -y install rabbitmq-server
apt-get -y install python-nova
apt-get -y install nova-common nova-doc 

# install 7 nova packages
apt-get -y install nova-api
apt-get -y install nova-scheduler 
apt-get -y install nova-network
apt-get -y install nova-compute 
# stop
/etc/init.d/apache2 stop

apt-get -y install nova-vncproxy
apt-get -y install nova-objectstore 
#nova-compute dependencies: libvirt-bin
apt-rdepends nova-compute | grep libvirt
# see if services are running
ps -e | grep nova
11201 ?        00:00:00 nova-api
11825 ?        00:00:01 nova-network
19733 ?        00:00:00 nova-objectstor
19939 ?        00:00:00 nova-scheduler
22088 ?        00:00:00 nova-compute
ps -e | grep libvirt
21806 ?        00:00:00 libvirtd
ls -l /etc/init.d/ | grep nova
# see nova in /usr/bin
ls -l /usr/bin | grep nova
# see nova log files
ls -l /var/log/nova 

# install euca-* tools
apt-get -y install euca2ools

cat ./Desktop/nova2.conf > /etc/nova/nova.conf
vim /etc/nova/nova.conf 
# some configurations
nova-api --help
# restart (restart one service at once)
# service xxx start | start xxx
#
# Note if the system has been rebooted,service such as ntp,rabbitmq-server,mysql-server,nova-api,glance-api,glance-registry will be auto started!
# servce ntp start
# service mysql start
# service rabbitmq-server start

# list all services related to nova
ls -l /etc/init.d/ | grep nova
# if service xxx failed to start, see related log file
ls -l /var/log/nova/

# restart all related services, or reboot the system
# If nova-api fail to restart ,add --daemonize=1 to /etc/nova/nova.conf
# you have to create a volume group "nova-volumes" if you want to use nova-volume with the default configuration and add it to /etc/nova/nova.conf
grep fail /var/log/boot.log
history | grep fail
restart libvirt-bin

apt-get -y install nova-volume 
# install iscsitarget
apt-get -y install iscsitarget iscsitarget-dkms
sed -i 's/false/true/g' /etc/default/iscsitarget
service iscsitarget restart

vim /etc/nova/nova.conf
--iscsi_ip_prefix=192.168.

#Create a Physical Volume.
pvcreate /dev/sda6
#Create a Volume Group named nova-volumes.
vgcreate nova-volumes /dev/sda6
#Create a ¡°nova¡± group, so you can set permissions on the configuration file:
groupadd nova
#Change the ownership of the /etc/nova folder and permissions for /etc/nova/nova.conf:
#The nova.config file should have its owner set to root:nova, and mode set to 0640, since the file contains your MySQL server¡¯s root password.
ls -l /etc/nova
chown -R root:nova /etc/nova
chmod 640 /etc/nova/nova.conf


#Restart all the nova related services.
restart nova-api
restart nova-network nova-volume nova-objectstore nova-scheduler nova-compute nova-vncproxy
restart glance-api 
restart glance-registry
#Setting Up OpenStack Compute Environment on the Compute Node
#
#These are the commands you run to ensure the database schema is current, and then set up a user and project:
#
#/usr/bin/nova-manage db sync
#/usr/bin/nova-manage user admin <user_name>
#/usr/bin/nova-manage project create <project_name> <user_name> 
#/usr/bin/nova-manage network create <project-network> <number-of-networks-in-project> <IPs in project>
#Here is an example of what this looks like with real values entered:
#

#With the Diablo release, the nova-manage command has been deprecated and you must specify if you want to use it by using the --use_deprecated_auth flag in nova.conf.
nova-manage --help |grep flagfile
# see db version
nova-manage --flagfile=/etc/nova/nova.conf db version
# db version will create a 'migrate_version' table in 'nova' database. And teh default version value is 0.After the second db sync ,it will be 46.

# sync db 
mv /var/lib/nova/nova.sqlite /var/lib/nova/nova.sqlite.save
#rm /var/lib/nova/nova.sqlite
nova-manage --flagfile=/etc/nova/nova.conf db sync
mysql -u root -prootpass nova
show tables;
# Create all necessary tables(39 tables except migrate_version table) in database 'nova' created before in mysql.
#Make sure you supply flagfile argument as otherwise nova-manage looks in the Nova bin directory for nova.conf
nova-manage --flagfile=/etc/nova/nova.conf user admin novaAdmin 
export EC2_ACCESS_KEY=4216e9bd-7963-4636-8cb7-4f95b8f02402
export EC2_SECRET_KEY=a1d984d6-be84-4264-beae-d21ce24daa93
# or you can see export EC2_* by issue the following command.
nova-manage --flagfile=/etc/nova/nova.conf user exports novaAdmin 
# create 1 record in table 'users'

nova-manage --flagfile=/etc/nova/nova.conf project create novaProj novaAdmin 
# create 1 record in table 'projects'

# network
nova-manage --flagfile=/etc/nova/nova.conf network create private 192.168.1.0/24 1 256 --bridge_interface=br100  
# create 1 record in table 'networks'
# nova-manage --flagfile=/etc/nova/nova.conf network delete 192.168.0.0/24
# nova-manage network create 3 notes:
# 1) --flagfile 2) create {public|private} 3) --bridge_interface
# bridge_interface is required to create a networks
# a)specify --bridge_interface=br100 in the command 
# b)add --flat_interface=br100 to your flagfile if you are using flat mode 
#    or --vlan_interface=br100 if you are using vlan mode 

# select from nova db
select * from users;
select * from projects;
select id,cidr from networks;
#Restart all the nova related services
service libvirt-bin start
service nova-api start
service nova-objectstore start
service nova-network start
service nova-compute start
service nova-scheduler start
service nova-volume start
service glance-api start
service glance-registry start


# list
nova-manage --flagfile=/etc/nova/nova.conf flavor list
# m1.tiny m1.small m1.media m1.large m1.xlarge
nova-manage --flagfile=/etc/nova/nova.conf user list
nova-manage --flagfile=/etc/nova/nova.conf project list
nova-manage --flagfile=/etc/nova/nova.conf network list
nova-manage --flagfile=/etc/nova/nova.conf service list

# instance type management(flavors)
# Nova has the concept of instance types. Each instance type is defined with certain amount of RAM and certain size of the hard disk. When an instance is launched with a particular instance type, Nova resizes the disk image to suit the instance type and allocates the RAM as defined for the instance type chosen. Nova calls instance types as 'flavors' and lets you add to the list of flavors. By default Nova has 5 types - m1.tiny, m1.small, m1.medium, m1.large and m1.xlarge.
nova-manage flavor list
nova-manage flavor create  xxx yyy zzz
nova-manage flavor delete --name=m1.miniscule


# download novacreds.zip
mkdir /home/ke/creds
nova-manage --flagfile=/etc/nova/nova.conf  project zipfile novaProj novaAdmin /home/ke/creds/novacreds.zip

#Contents of novacreds.zip are required to use euca2ools to manage the cloud infrastructure
cd /home/ke/creds
unzip novacreds
Archive:  novacreds.zip
 extracting: novarc                  
 extracting: pk.pem                  
 extracting: cert.pem                
 extracting: cacert.pem
#chown -R nova:nova /home/ke/creds/ 

#novarc contains several environmental variables including your nova credentials to be set before you can use the commands from euca2ools such euca-describe-images, euca-describe-instances etc. these variables can be set by sourcing novarc file.

#In Diablo, by default novarc file contains EC2_ACCESS_KEY in a format that is not usable by euca-* commands. To fix this:
nova-manage user exports novaAdmin
export EC2_ACCESS_KEY=4216e9bd-7963-4636-8cb7-4f95b8f02402
export EC2_SECRET_KEY=a1d984d6-be84-4264-beae-d21ce24daa93
# open novarc and replace the line
export EC2_ACCESS_KEY="novaAdmin:novaProj"
#with
export EC2_ACCESS_KEY="4216e9bd-7963-4636-8cb7-4f95b8f02402:novaProj"

source /home/ke/creds/novarc
env | grep NOVA_
env | grep EC2_
#Check if the credentials are working and if nova has been setup properly by running:
euca-describe-availability-zones verbose
euca-describe-availability-zones verbose
AVAILABILITYZONE	nova	available
AVAILABILITYZONE	|- ubuntu	
AVAILABILITYZONE	| |- nova-network	enabled :-) 2012-04-18 09:14:30
AVAILABILITYZONE	| |- nova-compute	enabled :-) 2012-04-18 09:14:36
AVAILABILITYZONE	| |- nova-scheduler	enabled :-) 2012-04-18 09:14:36


# install glance
apt-get -y install glance
ps -e | grep glance
 8549 ?        00:00:00 glance-api
 8575 ?        00:00:00 glance-registry
ls -l /etc/init.d/ | grep glance
# see glance in /usr/bin
ls -l /usr/bin | grep glance
# see glance log files
ls -l /var/log/glance
# display infos about glance
apt-cache policy glance
apt-cache show glance
dpkg -l glance
dpkg -L glance
locate glance
# how to see dependencies
apt-get install apt-rdepends
apt-rdepends glance
apt-rdepends glance | grep python-greenlet
# glance dependencies : python-greenlet
history | grep glance

# stop glance
stop glance-api
stop glance-registry
# glance db
locate glance.sqlite
/var/lib/glance/glance.sqlite
mv /var/lib/glance/glance.sqlite /var/lib/glance/glance.sqlite.save
#rm /var/lib/glance/glance.sqlite
grep -r sql_connection /etc/glance
/etc/glance/glance-registry.conf:sql_connection = sqlite:////var/lib/glance/glance.sqlite
# edit the conf
vim /etc/glance/glance-registry.conf
sql_connection=mysql://root:rootpass@192.168.1.170/glance

# create database glance
mysql -u root -prootpass
CREATE DATABASE glance;
# start glance service to create 'images' table in 'glance' database
service glance-api start
service glance-registry start
# Create 4 tables in glance database.

# Upload images
# disk format :aki ami ari  iso raw vmdk
# container format: aki ami ari ovf bare
# Mapping disk_format-container_format
# raw-bare vmdk-bare iso-bare aki-aki ari-ari ami-ami

# download tty 
mkdir stackimages
wget -c http://images.ansolabs.com/tty.tgz -O stackimages/tty.tgz
tar -xzvf stackimages/tty.tgz -C stackimages
ls -l /home/ke/stackimages

# source openrc to set OS_ env so that glance can be used with authentication.
# openrc
export OS_USERNAME=amdinUser
export OS_TENANT_NAME=adminTenant
export OS_PASSWORD=adminPass
export OS_AUTH_URL=http://192.168.1.170:5000/v2.0
export OS_REGION_NAME=RegionOne

ls -l /home/ke/openrc
source /home/ke/openrc
env | grep OS_
OS_REGION_NAME=RegionOne
OS_PASSWORD=adminPass
OS_AUTH_URL=http://192.168.1.170:5000/v2.0
OS_USERNAME=amdinUser
OS_TENANT_NAME=adminTenant

# source novarc to set NOVA_ env so that nova-manage and euca-* can be used with authentication.
ls -l /home/ke/creds/novarc  
source /home/ke/creds/novarc 
env | grep NOVA_
NOVA_CERT=/home/ke/creds/cacert.pem
NOVA_PROJECT_ID=novaProj
NOVA_VERSION=1.1
NOVA_USERNAME=novaAdmin
NOVA_API_KEY=4216e9bd-7963-4636-8cb7-4f95b8f02402
NOVA_URL=http://192.168.1.170:8774/v1.1/

# curl
curl -d '{"auth": {"tenantName": "openstackDemo", "passwordCredentials":{"username": "adminUser", "password": "secretword"}}}' -H "Content-type: application/json" http://127.0.0.1:35357/v2.0/tokens | python -mjson.tool
curl -d '{"auth": {"tenantName": "service", "passwordCredentials":{"username": "glance", "password": "asdf1234"}}}' -H "Content-type: application/json" http://127.0.0.1:35357/v2.0/tokens | python -mjson.tool
# glance
glance add|update|delete
glance index
glance details
glance show ?
glance --version
glance --help

# Mapping disk_format-container_format
# raw-bare vmdk-bare iso-bare aki-aki ari-ari ami-ami

glance add name="tty-kernel" is_public=true disk_format=aki container_format=aki < stackimages/aki-tty/image 
# kernel_id=1
glance add name="tty-ramdisk" is_public=true disk_format=ari container_format=ari < stackimages/ari-tty/image 
# ramdisk_id=2
glance add name="tty" is_public=true disk_format=ami container_format=ami kernel_id=1 ramdisk_id=2 < stackimages/ami-tty/image 
# id=3

#METHOD 2
# if no openrc, must set os_ in the glance add command.
glance --os_username=adminUser --os_password=adminPass --os_tenant=adminTenant --os_auth_url=http://127.0.0.1:5000/v2.0 add name="tty-kernel" is_public=true container_format=aki disk_format=aki < stackimages/aki-tty/image 

#UPLOAD vmdk
glance add name="Ubuntu11.10 vmdk" is_public=true disk_format=vmdk container_format=bare < /mnt/hgfs/SharedFolder/Ubuntu11.vmdk
# ID=4
#UPLOAD iso
glance add name="Ubuntu11.10 iso" is_public=true disk_format=iso container_format=bare  < /mnt/hgfs/SharedFolder/Ubuntu11.iso
# ID=5

# how to list images
glance --version
# glance 2011.3
glance index 
nova image-list
ecua-describe-images
# 1 2 3 4 5
glance details
glance show id

# How to start an instance
euca-add-keypair mykey >mykey.priv
ls -l /home/ke/mykey.priv
chmod 600 mykey.priv

euca-run-instances -k mykey -t m1.tiny $AMI_ID
# $AMI_ID comes from euca-describe-images
euca-describe-images 
# aki-00000001 ari-00000002 ami-00000003
euca-run-instances -k mykey -t m1.tiny ami-00000003
# instance  $VALUE=i-00000001   $IP_ADDR=10.0.0.3
euca-describe-instances
virsh list
Id Name                 State
----------------------------------
  2 instance-00000001    running


# how to ssh to the instance using private keypair
euca-authorize -P icmp -t -1:-1 default 
euca-authorize -P tcp -p 22 default
# or maybe 
killall dnsmasq
service nova-network restart

ssh -i mykey.priv $USER@$IP_ADDR
$IP_ADDR(euca-describe-instances)
ssh -i mykey.priv root@10.0.0.3
# how to terminate the instance when you are done with it
euca-terminate-instances $VALUE
euca-terminate-instances i-00000001


# AFTER REBOOT 
grep fail /var/log/boot.log

source /home/ke/openrc
source /home/ke/creds/novarc
# Every time the syetem is rebooted, we have to source the two files.It is not good. So add to /home/ke/.bashrc to auto souce.
cat /home/ke/openrc >> /home/ke/.bashrc
cat /home/ke/creds/novarc >> /home/ke/.bashrc
source /home/ke/.bashrc

env | grep OS_
env | grep NOVA_
env | grep EC2_

glance index
nova image-list
glance details


euca-describe-images
euca-describe-instances
euca-describe-availability-zones verbose


# Install keystone
apt-get -y install keystone
mv /var/lib/keystone/keystone.db /var/lib/keystone/keystone.db.save
#rm /var/lib/keystone/keystone.db
grep -r sql_connection /etc/keystone/
/etc/keystone/keystone.conf:sql_connection = sqlite:////var/lib/keystone/keystone.db
# edit the conf
vim /etc/keystone/keystone.conf
sql_connection=mysql://root:rootpass@192.168.1.170/keystone

# create database keystone
mysql -u root -prootpass
CREATE DATABASE keystone;

# sycn the keystone db(create 9 talbes)
service keystone restart

# Now use keystone-manage 

#Create a tenant adminTenant, add a user adminUser to this tenant, add an Admin role to the adminUser, and grant the Admin role to adminUser in adminTenant.
keystone-manage tenant add adminTenant
keystone-manage user add adminUser adminPass
keystone-manage role add Admin
keystone-manage role grant Admin adminUser
keystone-manage role grant Admin adminUser adminTenant
#Create a tenant demoTenant, add a user demoUser to this tenant, add a Member role, and grant demoUser the Member role, and then grant Member role to demoUser in demoTenant.
keystone-manage tenant add demoTenant
keystone-manage user add demoUser demoPass
keystone-manage role add Member
keystone-manage role grant Member demoUser
keystone-manage role grant Member demoUser demoTenant
#Now configure keystone admin and service admin roles. Check for these strings in keystone.conf
keystone-admin-role = Admin
keystone-service-admin-role = KeystoneServiceAdmin
#The Admin role has already been created. Now create KeystoneServiceAdmin role and assign to the adminUser of the admin tenant.
keystone-manage role add KeystoneServiceAdmin
keystone-manage role grant KeystoneServiceAdmin adminUser
keystone-manage role grant KeystoneServiceAdmin adminUser adminTenant
#Create the service token, and add it to the admin user and admin tenant. The token expires on February 5th, 2015. The service token is passed to glance and nova-api.
keystone-manage token add 999888777666 adminUser adminTenant 2015-02-05T00:00
#Define service catalog for nova, glance, and identity service.
keystone-manage service add nova compute "OpenStack Compute Service" 
keystone-manage service add glance image "OpenStack Image Service"
keystone-manage service add keystone identity "OpenStack Identity Service"
#Once the service catalog is defined, we create endpoints for them. Each service has three relevant URL¡¯s associated with it that are used in the command:
#the public API URL
#an administrative API URL
#an internal URL
#Endpoint for nova (compute). Note that we only create an endpoint for OpenStack API (notice the port 8774) for admin user belonging to admin tenant. Be sure to replace 192.168.1.170 with the IP address of machine where you are installing keystone.
keystone-manage endpointTemplates add RegionOne nova http://192.168.1.170:8774/v1.1/%tenant_id% http://192.168.1.170:8774/v1.1/%tenant_id% http://192.168.1.170:8774/v1.1/%tenant_id% 1 1
#Endpoint for glance (image). Since the glance has not been installed yet, make sure that glance port is the same as being specified in this service endpoint.
keystone-manage endpointTemplates add RegionOne glance http://192.168.1.170:9292/v1 http://192.168.1.170:9292/v1 http://192.168.1.170:9292/v1 1 1
#Endpoint for keystone (identity). The ports are defined in /etc/keystone/keystone.conf. By default these ports should match the ones below, but it is good to verify during setup.
keystone-manage endpointTemplates add RegionOne keystone http://192.168.1.170:5000/v2.0 http://192.168.1.170:35357/v2.0 http://192.168.1.170:5000/v2.0 1 1
#Start keystone (assuming cwd is where you unzipped keystone)
keystone
#You should see the following output. Pay attention to the opened ports:
Starting the RAX-KEY extension
Starting the Legacy Authentication component
Service API listening on 0.0.0.0:5000
Admin API listening on 0.0.0.0:35357
#Testing if keystone is working.
 curl -d '{"auth": {"tenantName": "adminTenant", "passwordCredentials":{"username": "adminUser", "password": "adminPass"}}}' -H "Content-type: application/json" http://192.168.1.170:35357/v2.0/tokens | python -mjson.tool







