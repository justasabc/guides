git config --global user.name "zunlin1234"
git config --global user.email "zunlin1234@gmail.com"

# fectch minigis2 repository from code.google.com 
# Way1
cd C:/Users/Administrator/
git clone https://zunlin1234@code.google.com/p/minigis2/ 
# need to input password 

# Way2
cd C:/Users/Administrator/
vim _netrc  # Window _netrc   Linux .netrc
machine code.google.com login zunlin1234@gmail.com password wn4HE8Hp2cd8 

# clone the repository to Current Working Directory
git clone https://code.google.com/p/minigis2/   ./minigis/
# add,update and delete files, etc.
git add ReadMe.txt ReadMe2.txt
# add all files to repository
git add .
git commit -m "initialize the minigis repo."

# push to the server repo
git push origin master

# ssh github
# close 360Safe
ssh-keygen 
ssh-keygen -t rsa # /C/Users/Administrator/.ssh/id_rsa  id_rsa.pub
ssh-keygen -C "zunlin1234@gmail.com"-t rsa 
# upload id_rsa.pub to GitHub.com. 
# github.com/justasabc/minigis/admin/keys  Deploy Keys--->Add a deploy key
ssh -v git@github.com
# successfully connect to github
git push origin master


# GIT COMMANDS
# Configurations
git config --global user.name "zunlin1234"
git config --global user.email "zunlin1234@gmail.com"
git config --global color.ui auto

git init # create a default active branch called master
# add and commit
vim file # 1 ---> working tree
git add file # 2 working tree---> staging index
git add dir/
git add .
git status
git commit -m "commit message" # 3 staging index--->commit 
git commit -a -m "commit message"
#This will add all changed (but not new) files to the index before committing.
git log
git log --pretty=oneline --abbrev-commit  # 40-digit hex hash--->7 hash

# Data Restore
git checkout file # 1.Not added: staging index---> working tree
git reset HEAD file.txt # 2.Added but not committed: last commit---> staging index
git reset HEAD 
# Reverting commits (undo commit) create a commit as well
git revert 068b9b9 # 3.Committed: commited---> last commit 
# Example :
vim file.txt
git checkout file.txt
git add file.txt
git reset HEAD file.txt
git commit -m "commit message"
git revert 

git log
git log -5
# Diff between commits
#To see the difference from one commit compared to its parent, use git show <commit>:
git show 3720b35
#To compare two specific commits, use git diff <commit_from>..<commit_to>:
git diff a2a1eb3..068b9b9
#To see the diffs for the complete history, use git log -p
git log -p
# Tagging commits
# git tag <name> <commit> assigns a tag to a commit. If <commit> is omitted, the last commit gets tagged:
git tag working 3720b35
git tag broken
git tag v1.0.3
# list all tags
git tag
#Tags can be used everywhere where you can use the commit hash
git show v1
git diff v1..v2
# Branches : a branch is a pointer to the last commit
# master branch was created automatically when we created the repository.
# list all branches
git branch
git branch -a
git branch -v
#create a new branch using git branch <name> <commit>. The specified commit will be the starting point for the new branch - if you omit it, the latest commit will be used:
git branch newfeature 3720b35
git branch newfeature  # last commit as starting point 
git branch
# You can switch between branches using git checkout <branchname>. 
git checkout newfeature # active branch is newfeature
git branch -v
# HEAD 
# HEAD--->Active Branch--->Last Commit
git checkout master
cat `.git/HEAD # refs/heads/master
cat .git/refs/heads/master

git checkout newfeature
cat .git/HEAD # refs/heads/newfeature
cat .git/refs/heads/newfeature

# Usage of HEAD
git show HEAD 
git show HEAD~3
git show HEAD^3

# Merging 
git merge newfeature # to be merged branch  active branch
#After you have merged the branch, you can delete it should you not need it anymore:
git branch -d newfeature
git branch -D newfeature

# Clone a remote repository to local
mkdir gis
git clone https://code.google.com/p/minigis2/  ./gis/
# Auto set origin.
# git remote add origin https://code.google.com/p/minigis2/

# Change Locally
git checkout master
ls
vim ReadMe.txt
git commit -a -m "change locally"
# push to remote
git push origin master

# Change Remotely
git checkout remotes/origin/master
ls
vim ReadMe.txt
git commit -a -m "change remotely"
# pull to local
git fetch remoteName branchName # 1
git merge remoteName/branchName # 2
git pull origin master # 3=1+2

git diff HEAD remotes/origin/HEAD

